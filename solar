import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sunpy.net import Fido
from sunpy.net import attrs as a
from sunpy.timeseries import TimeSeries

# Define start and end times for the data retrieval
tstart = "2024-02-25 00:00"
tend = "2024-02-25 23:59"

# Search and fetch GOES data
result = Fido.search(a.Time(tstart, tend), a.Instrument("XRS"))
goes_files = Fido.fetch(result)
goes_ts = TimeSeries(goes_files[0])  # Load the TimeSeries object from the fetched files

# Convert the GOES data to a DataFrame for easier manipulation
data = goes_ts.to_dataframe().reset_index()
data.rename(columns={'index': 'time', 'xrsa': 'short_flux', 'xrsb': 'long_flux'}, inplace=True)

# Calculate temperature and emission measure (simplified)
def calculate_temperature_emission(short_flux, long_flux):
    temperature = (long_flux / short_flux) * 10
    emission_measure = long_flux / (short_flux + 1e-6)
    return temperature, emission_measure

data['temperature'], data['emission_measure'] = calculate_temperature_emission(data['short_flux'], data['long_flux'])

# Adjusted parameters for FAI calculation
delta_em_threshold = 5e-4  # Lower threshold for rate of change in emission measure
ta, tb = 300, 500  # Adjusted temperature range to 300-500 million K
t_fai = pd.Timedelta(minutes=2)  # Duration for evaluating FAI condition

# Calculate rate of change of emission measure (dEM/dt) over Δt
delta_t = 10  # Interval in seconds for calculating rate of change
data['dEM_dt'] = data['emission_measure'].diff() / delta_t

# Initialize FAI_flag column
data['FAI_flag'] = 0

# FAI calculation with condition checking
for i in range(len(data) - 1):
    if ta <= data.loc[i, 'temperature'] <= tb:
        start_time = data.loc[i, 'time']
        end_time = start_time + t_fai
        interval_data = data[(data['time'] >= start_time) & (data['time'] <= end_time)]
        
        # Check condition on dEM/dt within the interval
        if (interval_data['dEM_dt'] >= delta_em_threshold).any():
            data.loc[i, 'FAI_flag'] = 1

# Debug output: Check flagged entries
flagged_entries = data[data['FAI_flag'] == 1]
print("Flagged Entries after adjustments:")
print(flagged_entries[['time', 'FAI_flag']])

# Plotting
plt.figure(figsize=(12, 6))
plt.plot(data['time'], data['long_flux'], label='GOES 1-8 Å Flux', color='blue')
plt.plot(data['time'], data['short_flux'], label='GOES 0.5-4 Å Flux', color='orange')
plt.scatter(data.loc[data['FAI_flag'] == 1, 'time'], data.loc[data['FAI_flag'] == 1, 'long_flux'], color='red', label='FAI Flag', marker='x')

# Customizing the plot
plt.yscale('log')
plt.title("GOES X-ray Flux with FAI-based Solar Flare Detection")
plt.xlabel("Time")
plt.ylabel("Flux (W/m²)")
plt.legend()
plt.grid(True)
plt.show()
